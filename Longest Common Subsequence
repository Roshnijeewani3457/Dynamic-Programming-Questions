// Memorization
public static int lcs(int m,int n,String t1,String t2,int dp[][])
    {
        if(m<=0 || n<=0)
            return 0;
        if(dp[m][n]!=-1)
            return dp[m][n];
        if(t1.charAt(m-1)==t2.charAt(n-1))
        {
            return dp[m][n]=1+lcs(m-1,n-1,t1,t2,dp);
        }
       return dp[m][n]=Math.max(lcs(m-1,n,t1,t2,dp),lcs(m,n-1,t1,t2,dp));
        
    }
  public int longestCommonSubsequence(String text1, String text2) {
        int[][] dp=new int[text1.length()+1][text2.length()+1];
        for(int i[]:dp)
        {
            Arrays.fill(i,-1);
        }
        if(text1.equals(text2))
        {
          return text1.length();  
        }
        return lcs(text1.length(),text2.length(),text1,text2,dp);
     }

// Tabulation

 public static int lcs(int m,int n,String t1,String t2,int dp[][])
    {
        
        for(int i=0;i<m+1;i++)
        {
            for(int j=0;j<n+1;j++)
            {
                if(i==0 || j==0)
                {
                   dp[i][j]=0;  
                }
            }
        }
        for(int i=1;i<m+1;i++)
        {
           for(int j=1;j<n+1;j++)
           {
               if(t1.charAt(i-1)==t2.charAt(j-1))
               {
                   dp[i][j]=1+dp[i-1][j-1];
               }
               else
               {
                   dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
               }
            }
        }
        return dp[m][n];
        
    }

 public int longestCommonSubsequence(String text1, String text2) {
        int[][] dp=new int[text1.length()+1][text2.length()+1];
        for(int i[]:dp)
        {
            Arrays.fill(i,-1);
        }
        if(text1.equals(text2))
        {
          return text1.length();  
        }
        return lcs(text1.length(),text2.length(),text1,text2,dp);
     }
    



