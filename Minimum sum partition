class Solution
{
   
    public int minDifference(int nums[], int n) 
	{ 
	    int s=0;
        for(int i:nums)
        {
            s+=i;
        }
       boolean dp[][]=new boolean[nums.length+1][s+1];
       for(int i=0;i<nums.length+1;i++)
       {
           dp[i][0]=true;
       }
        
        for(int i=1;i<s+1;i++)
       {
           dp[0][i]=false;
       } 
        
       for(int i=1;i<nums.length+1;i++) // filling the table ...i.e at the last row of table we are filling wehther the subset of nums with sum=0,1..s exists or not.
       {
         for(int j=1;j<s+1;j++)
         {
             if(nums[i-1]<=j)
             {
                dp[i][j]=dp[i-1][j-nums[i-1]] || dp[i-1][j];  
             }
          
             else
             {
                 dp[i][j]=dp[i-1][j];
             }
         }
       }
        int min=Integer.MAX_VALUE;
        for(int i=0;i<s+1;i++) //if in last row value is true that means arr with sum 0,1...s exists now we will find another part of subset sum and find minimum.

        {
            if(dp[nums.length-1][i]==true)
            {
                 min=Math.min(min,Math.abs(s-2*i)); // if s1+s2=s(range) then s1-s2=range-s2-s2 = (range-2*s2)
            }
         }
        return min;
      } 
}
