// Memorization
 public static boolean sumofsubset(int arr[],int sum,int i,boolean[][] dp)
     {
     
        if(sum==0)
            return true;
        if(i==0)
           return arr[0]==sum;
        if(dp[i][sum]!=false)
          return dp[i][sum];
         
        if(arr[i-1]<=sum)
         {
           return dp[i][sum]=(sumofsubset(arr,sum-arr[i-1],i-1,dp) || sumofsubset(arr,sum,i-1,dp));
         }
         return dp[i][sum]=sumofsubset(arr,sum,i-1,dp);
     }
 static Boolean isSubsetSum(int N, int arr[], int sum){
      boolean[][] dp=new boolean[N+1][sum+1];
      return sumofsubset(arr,sum,N-1,dp);
   }
}

// Tabulation
class Main{
 static Boolean isSubsetSum(int N, int arr[], int sum){
       boolean dp[][]=new boolean[N+1][sum+1];
        for(int i=0;i<N+1;i++)
        {
          dp[i][0]=true;
        }
        for(int i=1;i<sum+1;i++)
        {
          dp[0][i]=false;
        }
        
        
         for(int i=1;i<N+1;i++)
        {
           for(int j=1;j<sum+1;j++)
           {
             
              if(arr[i-1]<=j)
              {
                  dp[i][j]=((dp[i-1][j-arr[i-1]]) || (dp[i-1][j]));
              }
            else
            {
               dp[i][j]=dp[i-1][j];  
            }
            
            }
        }  
        return dp[N][sum];
}        
       
