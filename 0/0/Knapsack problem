 // Memorization Solution:-

 import java.util.*;
public class Main
{
    public static int knapsack(int[] wt,int[] val,int W,int n,int dp[][])
    {
             
        if(W==0 || n==0)  //Base Case
          return 0;
        if(dp[n-1][W]!=0)
          {
              return dp[n-1][W];
          }
        if(wt[n-1]<=W)// If weight of item less than Weight of bag
        {
            return dp[n-1][W]=Math.max(val[n-1]+knapsack(wt,val,W-wt[n-1],n-1,dp),knapsack(wt,val,W,n-1,dp));// either we pick or not pick bcoz we want maximum profit
        }
        else
        {
            return dp[n-1][W]=knapsack(wt,val,W,n-1,dp); //items not includes bcoz bag is full
        }
    
    
}
    public static void main(String[] args) {
		int wt[]={1,3,4,5};
		int val[]={1,4,5,7};
		int W=7;
		int n=wt.length;
		int dp[][]=new int[n+1][W+1];
    System.out.println(knapsack(wt,val,W,n,dp));
		
	}
}
------------------------------------------*-----------------------------------------*--------------------------------------------------------

// Tabulation Method:-

import java.util.*;
public class Main
{
    public static int knapsack(int[] wt,int[] val,int W,int n,int dp[][])
    {
        for(int i=0;i<n+1;i++)
       {
         for(int j=0;j<W+1;j++)
         {
             
             if(i==0 || j==0)
             {
                dp[i][j]=0;   
             }
             
         }
       }
       for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<W+1;j++)
            {
                if(wt[i-1]<=j)
                {
                     dp[i][j]=Math.max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
                }
              
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
                
                
                
            }
        }
        return dp[n][W];
    }
    public static void main(String[] args) {
		int wt[]={1,3,4,5};
		int val[]={1,4,5,7};
		int W=7;
		int n=wt.length;
		int dp[][]=new int[n+1][W+1];
        System.out.println(knapsack(wt,val,W,n,dp));
		
	}
}





